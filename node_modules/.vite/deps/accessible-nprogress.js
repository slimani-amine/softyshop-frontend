import {
  __commonJS
} from "./chunk-YBOLLQGG.js";

// node_modules/accessible-nprogress/dist/accessible-nprogress.js
var require_accessible_nprogress = __commonJS({
  "node_modules/accessible-nprogress/dist/accessible-nprogress.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define("NProgress", [], factory);
      else if (typeof exports === "object")
        exports["NProgress"] = factory();
      else
        root["NProgress"] = factory();
    })(self, function() {
      return (
        /******/
        function() {
          "use strict";
          var __webpack_modules__ = {
            /***/
            "./src/util.js": (
              /*!*********************!*\
                !*** ./src/util.js ***!
                \*********************/
              /***/
              function(__unused_webpack_module, __webpack_exports__2, __webpack_require__2) {
                __webpack_require__2.r(__webpack_exports__2);
                __webpack_require__2.d(__webpack_exports__2, {
                  /* harmony export */
                  "assign": function() {
                    return (
                      /* binding */
                      assign
                    );
                  },
                  /* harmony export */
                  "clamp": function() {
                    return (
                      /* binding */
                      clamp
                    );
                  },
                  /* harmony export */
                  "toBarPerc": function() {
                    return (
                      /* binding */
                      toBarPerc
                    );
                  },
                  /* harmony export */
                  "randomInc": function() {
                    return (
                      /* binding */
                      randomInc
                    );
                  },
                  /* harmony export */
                  "removeElement": function() {
                    return (
                      /* binding */
                      removeElement
                    );
                  },
                  /* harmony export */
                  "queue": function() {
                    return (
                      /* binding */
                      queue
                    );
                  }
                  /* harmony export */
                });
                function assign(target) {
                  var retTarget = Object(target);
                  for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i += 1) {
                    var obj = i + 1 < 1 || arguments.length <= i + 1 ? void 0 : arguments[i + 1];
                    var keys = Object.keys(obj);
                    for (var j = 0; j < keys.length; j += 1) {
                      retTarget[keys[j]] = obj[keys[j]];
                    }
                  }
                  return retTarget;
                }
                function clamp(value, min, max) {
                  if (value < min)
                    return min;
                  if (value > max)
                    return max;
                  return value;
                }
                function toBarPerc(value) {
                  return (-1 + value) * 100;
                }
                function randomInc(status) {
                  if (status >= 0 && status < 0.2) {
                    return 0.1;
                  }
                  if (status >= 0.2 && status < 0.5) {
                    return 0.04;
                  }
                  if (status >= 0.5 && status < 0.8) {
                    return 0.02;
                  }
                  if (status >= 0.8 && status < 0.99) {
                    return 5e-3;
                  }
                  return 0;
                }
                function removeElement(element) {
                  if (element && element.parentNode) {
                    element.parentNode.removeChild(element);
                  }
                }
                var queue = function() {
                  var functionQueue = [];
                  function next() {
                    var fn = functionQueue.shift();
                    if (fn) {
                      fn(next);
                    }
                  }
                  return function(fn) {
                    functionQueue.push(fn);
                    if (functionQueue.length === 1) {
                      next();
                    }
                  };
                }();
              }
            ),
            /***/
            "./src/styles.css": (
              /*!************************!*\
                !*** ./src/styles.css ***!
                \************************/
              /***/
              function(__unused_webpack_module, __webpack_exports__2, __webpack_require__2) {
                __webpack_require__2.r(__webpack_exports__2);
              }
            )
            /******/
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed
              /******/
              // no module.loaded needed
              /******/
              exports: {}
              /******/
            };
            __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          !function() {
            __webpack_require__.d = function(exports2, definition) {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          }();
          !function() {
            __webpack_require__.o = function(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
          }();
          !function() {
            __webpack_require__.r = function(exports2) {
              if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
              }
              Object.defineProperty(exports2, "__esModule", { value: true });
            };
          }();
          var __webpack_exports__ = {};
          !function() {
            __webpack_require__.r(__webpack_exports__);
            var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
              /*! ./util */
              "./src/util.js"
            );
            var _styles_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
              /*! ./styles.css */
              "./src/styles.css"
            );
            var DEFAULTS = {
              minimum: 0.08,
              easing: "linear",
              speed: 200,
              trickle: true,
              trickleSpeed: 200,
              showSpinner: true,
              barSelector: "div.bar",
              barLabel: "processing request",
              spinnerSelector: "div.spinner",
              spinnerLabel: "processing request",
              parent: "body",
              template: '\n    <div class="bar" role="progressbar" aria-valuemin="0" aria-valuemax="1">\n      <div class="peg"></div>\n    </div>\n    <div class="spinner" role="progressbar" aria-valuemin="0" aria-valuemax="1">\n      <div class="spinner-icon"></div>\n    </div>\n  '
            };
            var NProgress = function NProgress2() {
              var localSettings = DEFAULTS;
              var localStatus = null;
              var initialPromises = 0;
              var currentPromises = 0;
              function isRendered() {
                return !!document.getElementById("nprogress");
              }
              function isStarted() {
                return typeof localStatus === "number";
              }
              function render() {
                if (isRendered()) {
                  return document.getElementById("nprogress");
                }
                document.documentElement.classList.add("nprogress-busy");
                var progress = document.createElement("div");
                progress.id = "nprogress";
                progress.innerHTML = localSettings.template;
                var perc = isStarted() ? "-100" : (0, _util__WEBPACK_IMPORTED_MODULE_0__.toBarPerc)(localStatus || 0);
                var bar = progress.querySelector(localSettings.barSelector);
                bar.setAttribute("aria-label", localSettings.barLabel);
                bar.style.transform = "translate3d(".concat(perc, "%,0,0)");
                bar.style.transition = "all 0 linear";
                var spinner = progress.querySelector(localSettings.spinnerSelector);
                if (spinner) {
                  if (!localSettings.showSpinner) {
                    (0, _util__WEBPACK_IMPORTED_MODULE_0__.removeElement)(spinner);
                  } else {
                    spinner.setAttribute("aria-label", localSettings.spinnerLabel);
                  }
                }
                var parent = document.querySelector(localSettings.parent);
                if (parent) {
                  if (parent !== document.body) {
                    parent.classList.add("nprogress-custom-parent");
                  }
                  parent.appendChild(progress);
                }
                return progress;
              }
              return {
                /**
                 * Updates configuration.
                 *
                 * @param {object} options - options to override/set
                 * @return {object} The NProgress object.
                 */
                configure: function configure(options) {
                  (0, _util__WEBPACK_IMPORTED_MODULE_0__.assign)(localSettings, options);
                  return this;
                },
                /**
                 * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.
                 *
                 * @param {number} value - progress to set
                 * @return {object} The NProgress object.
                 */
                set: function set(value) {
                  var _this = this;
                  var clamppedValue = (0, _util__WEBPACK_IMPORTED_MODULE_0__.clamp)(value, localSettings.minimum, 1);
                  localStatus = clamppedValue === 1 ? null : clamppedValue;
                  var progress = render();
                  progress.offsetWidth;
                  (0, _util__WEBPACK_IMPORTED_MODULE_0__.queue)(function(next) {
                    var speed = localSettings.speed, easing = localSettings.easing;
                    var bar = progress.querySelector(localSettings.barSelector);
                    bar.setAttribute("aria-valuenow", clamppedValue);
                    bar.style.transform = "translate3d(".concat((0, _util__WEBPACK_IMPORTED_MODULE_0__.toBarPerc)(clamppedValue), "%,0,0)");
                    bar.style.transition = "all ".concat(speed, "ms ").concat(easing);
                    if (clamppedValue === 1) {
                      progress.style.transition = "none";
                      progress.style.opacity = 1;
                      progress.offsetWidth;
                      setTimeout(function() {
                        progress.style.transition = "all ".concat(speed, "ms linear");
                        progress.style.opacity = 0;
                        setTimeout(function() {
                          _this.remove();
                          next();
                        }, speed);
                      }, speed);
                    } else {
                      setTimeout(next, speed);
                    }
                  });
                  return this;
                },
                /**
                 * Shows the progress bar.
                 * This is the same as setting the status to 0%, except that it doesn't go backwards.
                 *
                 * @return {object} The NProgress object.
                 */
                start: function start() {
                  var _this2 = this;
                  if (!localStatus) {
                    this.set(0);
                  }
                  var work = function work2() {
                    setTimeout(function() {
                      if (!localStatus) {
                        return;
                      }
                      _this2.inc();
                      work2();
                    }, localSettings.trickleSpeed);
                  };
                  if (localSettings.trickle) {
                    work();
                  }
                  return this;
                },
                /**
                 * Hides the progress bar.
                 * This is the *sort of* the same as setting the status to 100%, with the
                 * difference being `done()` makes some placebo effect of some realistic motion.
                 *
                 * @param {boolean} force - show the progress bar complete even if its hidden
                 * @return {object} The NProgress object.
                 */
                done: function done(force) {
                  if (!force && !localStatus) {
                    return this;
                  }
                  var halfRandom = 0.5 * Math.random();
                  return this.inc(0.3 + halfRandom).set(1);
                },
                /**
                 * Increments progress bar by given amount.
                 *
                 * @param {number} [amount] - amount to increment the progress bar by
                 * @return {object} The NProgress object.
                 */
                inc: function inc() {
                  var amount = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : (0, _util__WEBPACK_IMPORTED_MODULE_0__.randomInc)(localStatus);
                  if (!localStatus) {
                    return this.start();
                  }
                  var clamppedStatus = (0, _util__WEBPACK_IMPORTED_MODULE_0__.clamp)(localStatus + amount, 0, 0.994);
                  return this.set(clamppedStatus);
                },
                /**
                 * Removes the element. Opposite of render().
                 */
                remove: function remove() {
                  document.documentElement.classList.remove("nprogress-busy");
                  document.querySelector(localSettings.parent).classList.remove("nprogress-custom-parent");
                  var progress = document.getElementById("nprogress");
                  if (progress) {
                    (0, _util__WEBPACK_IMPORTED_MODULE_0__.removeElement)(progress);
                  }
                },
                /**
                 * Waits for all supplied promises and increases the progress as the promises resolve.
                 *
                 * @param $promise Promise
                 * @return {object} The NProgress object.
                 */
                promise: function promise($promise) {
                  var _this3 = this;
                  if (currentPromises === 0) {
                    this.start();
                  }
                  initialPromises += 1;
                  currentPromises += 1;
                  var promiseResolution = function promiseResolution2() {
                    currentPromises -= 1;
                    if (currentPromises === 0) {
                      initialPromises = 0;
                      _this3.done();
                    } else {
                      _this3.set((initialPromises - currentPromises) / initialPromises);
                    }
                  };
                  $promise.then(promiseResolution).catch(promiseResolution);
                  return this;
                },
                get status() {
                  return localStatus;
                },
                get settings() {
                  return localSettings;
                }
              };
            };
            __webpack_exports__["default"] = NProgress();
          }();
          __webpack_exports__ = __webpack_exports__["default"];
          return __webpack_exports__;
        }()
      );
    });
  }
});
export default require_accessible_nprogress();
/*! Bundled license information:

accessible-nprogress/dist/accessible-nprogress.js:
  (*!
   * 
   *   Mon Sep 06 2021 22:45:41 GMT-0500 (Central Daylight Time)
   *   Accessible NProgress, (c) 2021 Nicholas Mackey - http://nmackey.com/accessible-nprogress
   *   @license MIT
   *
   *)
  (*!**********************!*\
    !*** ./src/index.js ***!
    \**********************)
*/
//# sourceMappingURL=accessible-nprogress.js.map
